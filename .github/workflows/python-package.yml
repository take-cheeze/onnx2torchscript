# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        torch-version:
        # - "1.9"
        - "1.10"
        - "1.11"
        - "1.12"
        - "1.13"
        os:
        - "ubuntu-latest"
        # - "macos-latest"
        include:
        - os: ubuntu-latest
          cache-path: ~/.cache/pip
        # - os: macos-latest
        #   cache-path: ~/Library/Caches/pip
        # - os: windows-latest
        #   cache-path: ~\AppData\Local\pip\Cache
    runs-on: ${{ matrix.os }}
    env:
      TORCH_SHOW_CPP_STACKTRACES: 1

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v3
      with:
        path: |
          ${{ matrix.cache-path }}
          ~/.onnx
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}-${{ matrix.torch-version }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install torch==${{ matrix.torch-version }} --extra-index-url https://download.pytorch.org/whl/cpu
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Install
      run: |
        pip install -v -e .[test]

    - name: Test with pytest
      run: |
        pytest --durations=10 -v
    - name: Test script
      run: |
        test_dir=$(python3 -m pip show onnx | awk '/Location: / { print $2 }')/onnx/backend/test/data/node/test_abs
        python3 ./scripts/run_test_dir.py "${test_dir}"
        ls "${test_dir}/model.pt"

  lint:
    runs-on: "ubuntu-latest"
    steps:
    - name: Install dependencies
      run: |
        python -m pip install flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
